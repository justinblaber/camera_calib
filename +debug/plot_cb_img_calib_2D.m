function plot_cb_img_calib_2D(calib, idx_board, a)
    % This will plot calibration results over a calibration board image

    if ~exist('a', 'var')
        f = figure();
        a = axes(f);
    end
    cla(a);

    % Show image
    calib.extrin(idx_board).cb_img.imshow('parent', a);
    hold(a, 'on');

    switch calib.config.calibration_target
        case 'checker'
            % Plot border around checkers
            height_offset = (calib.config.height_fp-calib.config.num_targets_height*calib.config.target_spacing)/2;
            width_offset = (calib.config.width_fp-calib.config.num_targets_width*calib.config.target_spacing)/2;
            for i = 1:calib.config.num_targets_width
                for j = 1:calib.config.num_targets_height
                    % Get checker coords
                    boarder_x_w = [(i-1)*calib.config.target_spacing  ...
                                   (i-1)*calib.config.target_spacing ...
                                   i*calib.config.target_spacing ...
                                   i*calib.config.target_spacing ...
                                   (i-1)*calib.config.target_spacing]'+width_offset;
                    boarder_x_w = [linspace(boarder_x_w(1), boarder_x_w(2), 20) ...
                                   linspace(boarder_x_w(2), boarder_x_w(3), 20) ...
                                   linspace(boarder_x_w(3), boarder_x_w(4), 20) ...
                                   linspace(boarder_x_w(4), boarder_x_w(1), 20)]';
                    boarder_y_w = [(j-1)*calib.config.target_spacing ...
                                   j*calib.config.target_spacing ...
                                   j*calib.config.target_spacing ...
                                   (j-1)*calib.config.target_spacing ...
                                   (j-1)*calib.config.target_spacing]'+height_offset;
                    boarder_y_w = [linspace(boarder_y_w(1), boarder_y_w(2), 20) ...
                                   linspace(boarder_y_w(2), boarder_y_w(3), 20) ...
                                   linspace(boarder_y_w(3), boarder_y_w(4), 20) ...
                                   linspace(boarder_y_w(4), boarder_y_w(1), 20)]';

                    % Plot
                    boarder_p_m = alg.p_m(calib.intrin.A, ...
                                          calib.intrin.distortion, ...
                                          calib.extrin(idx_board).rotation, ...
                                          calib.extrin(idx_board).translation, ...
                                          [boarder_x_w boarder_y_w]);
                    plot(boarder_p_m(:, 1), boarder_p_m(:, 2), 'w-', 'LineWidth', 3, 'parent', a);
                    plot(boarder_p_m(:, 1), boarder_p_m(:, 2), 'k-', 'LineWidth', 1, 'parent', a);
                end
            end

            % Plot refinement windows around points
            % Cache image dimensions for speed
            img_width = calib.extrin(idx_board).cb_img.get_width();
            img_height = calib.extrin(idx_board).cb_img.get_height();
            % Cache inverse homography for speed
            homography_refine_inv = calib.extrin(idx_board).debug.homography_refine^-1;
            for i = 1:size(calib.extrin(idx_board).board_points_p, 1)
                % Get window points in pixel coordinates
                [~, ~, win_point_corners_p] = alg.refine_checker_window(calib.extrin(idx_board).board_points_p(i, :), ...
                                                                      calib.extrin(idx_board).debug.homography_refine, ...
                                                                      homography_refine_inv, ...
                                                                      img_width, ...
                                                                      img_height, ...
                                                                      calib.config);

                % Plot
                patch(a, win_point_corners_p([1 2 4 3], 1), win_point_corners_p([1 2 4 3], 2), ...
                      'k', 'FaceAlpha', 0.25, 'EdgeColor', 'w', 'EdgeAlpha', 0.25);
            end
        otherwise
            error(['Calibration target: "' calib_config.calibration_target '" is not supported.']);
    end

    % Plot axes
    axes_coords_w = [0 0;
                     calib.config.target_spacing 0;
                     0 0;
                     0 calib.config.target_spacing];
    axes_coords_m = alg.p_m(calib.intrin.A, ...
                            calib.intrin.distortion, ...
                            calib.extrin(idx_board).rotation, ...
                            calib.extrin(idx_board).translation, ...
                            axes_coords_w);
    quiver(axes_coords_m(1:2:end, 1), ...
           axes_coords_m(1:2:end, 2), ...
           axes_coords_m(2:2:end, 1)-axes_coords_m(1:2:end, 1), ...
           axes_coords_m(2:2:end, 2)-axes_coords_m(1:2:end, 2), ...
           'color', 'r', 'LineWidth', 2, 'AutoScale', 'off', 'parent', a);

    text_coords_w = [1.5*calib.config.target_spacing 0;
                     0 1.5*calib.config.target_spacing];
    text_coords_m = alg.p_m(calib.intrin.A, ...
                            calib.intrin.distortion, ...
                            calib.extrin(idx_board).rotation, ...
                            calib.extrin(idx_board).translation, ...
                            text_coords_w);
    text(text_coords_m(1, 1), text_coords_m(1, 2), 'x', ...
         'FontSize', 12, 'HorizontalAlignment', 'center', 'color', 'r', ...
         'FontWeight', 'bold', 'parent', a);
    text(text_coords_m(2, 1), text_coords_m(2, 2), 'y', ...
         'FontSize', 12, 'HorizontalAlignment', 'center', 'color', 'r', ...
         'FontWeight', 'bold', 'parent', a);

    % Plot displacements
    board_points_m = alg.p_m(calib.intrin.A, ...
                             calib.intrin.distortion, ...
                             calib.extrin(idx_board).rotation, ...
                             calib.extrin(idx_board).translation, ...
                             alg.p_cb_w(calib.config));
    quiver(calib.extrin(idx_board).board_points_p(:, 1), ...
           calib.extrin(idx_board).board_points_p(:, 2), ...
           board_points_m(:, 1)-calib.extrin(idx_board).board_points_p(:, 1), ...
           board_points_m(:, 2)-calib.extrin(idx_board).board_points_p(:, 2), ...
           'color', 'b', 'LineWidth', 1, 'AutoScale', 'off', 'parent', a);

    % Plot points
    plot(board_points_m(:, 1), board_points_m(:, 2), 'r+', 'MarkerSize', 6, 'LineWidth', 1, 'parent', a);
    plot(calib.extrin(idx_board).board_points_p(:, 1), calib.extrin(idx_board).board_points_p(:, 2), 'gs', 'MarkerSize', 6, 'LineWidth', 1, 'parent', a);

    % Plot four points
    plot(calib.extrin(idx_board).four_points_p(:, 1), calib.extrin(idx_board).four_points_p(:, 2), 'bo', 'MarkerSize', 12, 'LineWidth', 2, 'parent', a);

    % Plot principle point
    plot([calib.intrin.A(1, 3) calib.intrin.A(1, 3)], [1 calib.extrin(idx_board).cb_img.get_height()], '--g', 'parent', a);
    plot([1 calib.extrin(idx_board).cb_img.get_width()], [calib.intrin.A(2, 3) calib.intrin.A(2, 3)], '--g', 'parent', a);

    % Plot center of image (to compare principle point)
    plot([(calib.extrin(idx_board).cb_img.get_width()+1)/2 (calib.extrin(idx_board).cb_img.get_width()+1)/2], [1 calib.extrin(idx_board).cb_img.get_height()], '--r', 'parent', a);
    plot([1 calib.extrin(idx_board).cb_img.get_width()], [(calib.extrin(idx_board).cb_img.get_height()+1)/2 (calib.extrin(idx_board).cb_img.get_height()+1)/2], '--r', 'parent', a);

    % Remove hold
    hold(a, 'off');
end
